#+TITLE: Tarea 3 - Diseño y Análisis de Algoritmos
#+AUTHOR: Nicolás Salas V.

* DONE Tarea 3 CC4102 [100%]
  DEADLINE: <2015-12-16 mié>
  
** DONE Código [4/4]

Ok. No haremos Van Emde Boas. Mala... pero salva tiempo

*** DONE ABB [3/3]
- [X] Búsqueda
- [X] Inserción
- [X] Eliminación

*** DONE Splay Tree [3/3]
- [X] Búsqueda
- [X] Eliminación
- [X] Inserción

*** DONE Árbol AVL [3/3]
- [X] Búsqueda
- [X] Eliminación
- [X] Inserción

*** DONE Árbol de Van Emde Boas [0/3]
- [ ] Búsqueda
- [ ] Eliminación
- [ ] Inserción

** DONE Informe [100%]
- [X] Introducción
- [X] Hipótesis
- [X] Diseño Experimental
- [X] Resultados
- [X] Análisis e Interpretación
- [X] Anexos

** Experimentos
   - Elementos con mayores probabilidades que otros
   - Caso degenerado (elementos ordenados)
   - Caso random.

Cada experimento con cadenas al azar y cadenas extraídas desde pizza & chili.

  - Caso degenerado -> Se generan las cadenas 1 por 1 y ya está
  - Caso random -> Usamos un número suficientemente grande de elementos sin preocuparnos por los repetidos, tal que la estructura sea más o menos pesada.
  - Elementos con mayores probabilidades que otros.
    1) Tirar una moneda, con probabilidad 0.9 caigo en el 10% de los elementos, con 0.1 en el resto.
    2) Elijo *uniformemente* entre los conjuntos un elemento para buscarlo.

Elegir un elemento:

  1. cs tiene size cs->num_elems
  2. si un rand sale < 0.9 elegir un número [0, (int)cs->num_elems/10]
  3. si sale >= 0.9 elegir un número [(int)cs->num_elems/10, cs->num_elems]

*** Cómo hacer los experimentos?

Para todos los experimentos descritos hacemos lo que sigue:

- Siempre medir para 2^k con k en {0, 25}
  * Anotar los valores de tiempo acumulados para cada 2^k
  * Anotar el tamaño de la estructura para 2^k
- Al terminar se hace lo sgte
  * Buscar todos los elementos en el orden que fueron insertados
    + Al llegar a 2^k, anotar el tiempo acumulado
  * Buscar algunos elementos con mayor probabilidad que otros. La estructura en este punto tiene 2^25 elems
    Vamos a tomar 2^16 elementos y haremos lo que sigue.
    + Tirar una moneda, con probabilidad 0.9 caer en el 10% de los elementos, con 0.1 en el resto.
    + Del conjunto que se elige, tomar un valor elegido con probabilidad uniforme
    + Buscarlo
    + Anotar el tiempo promedio de búsqueda
- Eliminar todo en orden
  - Anotar el tiempo promedio de eliminación para 2^k elementos.
    
*** Cómo medir los resultados?

Primero que cualquier cosa: Los resultados deben *promediarse* entre sí con diferentes inputs.
Por lo tanto, la struct cadena es lo último que se genera (qué lata, por lo del disco, digo).

Entonces, el algoritmo (very chanta) de generación de resultados es el siguiente:

- Por cada espacio (real o sintético):
  - Por cada ESTRUCTURA (abb, avl, sptree, veb)
    - Por cada tipo de input (random, degenerado), ejecutar el experimento y obtener mu,stdev de todos los datos a buscar
      - Si todos los errores son menores que \varepsilon, terminar.
*** Algoritmo real

Bueno, se tiene una función run_once que recibe como string el tipo de estructura de dato a probar
y una cadena_struct, con el array de cadenas de cada caso. Dicha función sólo reporta resultados.

La función de armar los resultados y los archivos es "experimento", que recibe como strings la estructura
en la que se hará el experimento, el espacio, que representa real o sintético (según esto vemos la
forma de construir una cadena_struct) y el tipo de input, que es random o degenerado.

La función experimento debe calcular todos los promedios y errores.
